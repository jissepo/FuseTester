# FuseTester API - Backend Configuration
# Serves the containerized Node.js API from api.carbot.joeleht.dev

upstream fusetester_api {
    server 127.0.0.1:3000;
    # Docker container runs on localhost:3000
    # Add multiple containers for load balancing if needed
    # server 127.0.0.1:3001;
    keepalive 32;
}

server {
    listen 80;
    server_name api.carbot.joeleht.dev;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl;
    server_name api.carbot.joeleht.dev;
    http2 on;

    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/api.carbot.joeleht.dev/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.carbot.joeleht.dev/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # CORS headers for API access
    add_header Access-Control-Allow-Origin "https://carbot.joeleht.dev" always;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
    add_header Access-Control-Allow-Credentials "true" always;

    # Handle preflight requests
    location / {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "https://carbot.joeleht.dev";
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type "text/plain charset=UTF-8";
            add_header Content-Length 0;
            return 204;
        }

        # Proxy to Node.js application
        proxy_pass http://fusetester_api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Health check endpoint - no caching
    location /health {
        proxy_pass http://fusetester_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Disable caching for health checks
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
    }

    # Data endpoints - short cache for high-frequency requests
    location ~* ^/(data|stats)$ {
        proxy_pass http://fusetester_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Short cache for data endpoints
        expires 5s;
        add_header Cache-Control "public, max-age=5";
    }

    # Request size limits
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_types
        application/json
        application/javascript
        text/css
        text/javascript
        text/plain
        text/xml;

    # Logging with detailed format
    log_format api_logs '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '$request_time $upstream_response_time';
    
    access_log /var/log/nginx/api.carbot.joeleht.dev.access.log api_logs;
    error_log /var/log/nginx/api.carbot.joeleht.dev.error.log;

    # Security
    location ~ /\. {
        deny all;
    }

    # Block common exploit attempts
    location ~* \.(env|git|svn|htaccess|htpasswd)$ {
        deny all;
    }
}
